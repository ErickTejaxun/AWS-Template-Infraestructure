AWSTemplateFormatVersion: "2019-03-30"

Description: > 
  This is a template to create a VPC
  how part of project number one of Seminario de sistemas 1 course.  
  Erick Roberto Tejaxun Xicon 201213050
  This archive create a VPC whit two public subnets in diferents AZ and 
  two private subnets in diferents AZ. 
  Too create a Internet gateway to use in the publics subnets.
  Public subnet one 

Parameters:
  CidrBlock:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16 # Con esto podemos tener muchas redes distintas. 255 

Resources:
  VPC: #Declararemos los parametros para nuestra virtual private cloud. 
    Type: AWS::EC2::VPC 
    Properties:
      CidrBlock: !Ref CidrBlock # Hacemos referencia al CidrBlock (Bloque de direcciones) creado anteriormente.
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Vpc #Nombre de nuestra stack+"vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway #Nuestra puerta de enlace para tener conexi√≥n a internet en nuestra vpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} InternetGateway 

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment #Agregamos nuestra puerta de enlace a internet a nuestra vpc.
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1: # Primer subred publica en AV1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [0, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2: # Segunda red publica en AV 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [1, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnet1: # Primer subred privada en AV1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [2, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2: # Segunda red privada en AV 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [3, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  PublicRouteTable: # Nuestra tabla de enrutamiento para nuestras red publica.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute: #Regla de permitir trafico 
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation: #Asociamos la regla anterior a nuestra primer red publica
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation: #Asociamos la regla anterior a nuestra segunda red publica
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatGatewayEIP: # Asignamos direcciones IP elasticas a nuestra vpc. (para usarla luego para nuestras instancias.)
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway: # Nat para nuestra 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1: #Nuestra tabla de enrutamiento para nuestras redes privadas.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateRouteTable2: #Nuestra tabla de enrutamiento para nuestras redes privadas.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnet1RouteTableAssociation: # Enlazamos nuestra tabla a nuestra primer red. 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation: # Enlazamos nuestra tabla 2 a nuestra segunda red privada.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DefaultPrivateRoute1: # Ruta por defecto en nuestra tabla para nuestra red privada 1.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  DefaultPrivateRoute2: # Ruta por defecto en nuestra tabla para nuestra red privada 2.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


  EC2Instance: #  Instancia servidor
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      IamInstanceProfile: !Ref ContainerInstanceProfile # Perfil Usuario IAM
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType # Nuestro tipo de instancia, por defecto t2.micro
      KeyName: !Ref KeyPair # nuestro keypar declarado arriba.
      SecurityGroupIds:
        - Fn::ImportValue:
            "demo-sg-ecs"
      SubnetId:
        Fn::ImportValue:
          "demo-PrivateSubnet1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Container Instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
            ls -l 

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
            "demo-VPC"
      GroupName: !Sub "${AWS::StackName} SG ALB Public"
      GroupDescription: !Sub "${AWS::StackName} SG ALB Public"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} SG ALB Public"

  ContainerInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
            "demo-VPC"
      GroupName: !Sub "${AWS::StackName} SG Container Instance"
      GroupDescription: !Sub "${AWS::StackName} SG Container Instance"
      SecurityGroupIngress:
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref PublicSecurityGroup
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} SG Container Instance"

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: "demo-VPC"

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: "demo-PublicSubnets"

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: "demo-PrivateSubnets"

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: "demo-PublicSubnet1"

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: "demo-PublicSubnet2"

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: "demo-PrivateSubnet1"

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: "demo-PrivateSubnet2"