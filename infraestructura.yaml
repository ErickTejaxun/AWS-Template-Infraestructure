AWSTemplateFormatVersion: "2010-09-09"

Description: > 
  This is a template to create a VPC
  how part of project number one of Seminario de sistemas 1 course.  
  Erick Roberto Tejaxun Xicon 201213050
  This archive create a VPC whit two public subnets in diferents AZ and 
  two private subnets in diferents AZ. 
  Too create a Internet gateway to use in the publics subnets.
  Public subnet one 

Parameters:
  CidrBlock:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16 # Con esto podemos tener muchas redes distintas. 255 

  AIM:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'    

Resources:
  VPC: #Declararemos los parametros para nuestra virtual private cloud. 
    Type: AWS::EC2::VPC 
    Properties:
      CidrBlock: !Ref CidrBlock # Hacemos referencia al CidrBlock (Bloque de direcciones) creado anteriormente.
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Vpc #Nombre de nuestra stack+"vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway #Nuestra puerta de enlace para tener conexión a internet en nuestra vpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} InternetGateway 

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment #Agregamos nuestra puerta de enlace a internet a nuestra vpc.
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1: # Primer subred publica en AV1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [0, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2: # Segunda red publica en AV 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [1, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnet1: # Primer subred privada en AV1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [2, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2: # Segunda red privada en AV 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [3, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  PublicRouteTable: # Nuestra tabla de enrutamiento para nuestras red publica.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute: #Regla de permitir trafico.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation: #Asociamos la regla anterior a nuestra primer red publica
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation: #Asociamos la regla anterior a nuestra segunda red publica
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatGatewayEIP: # Asignamos direcciones IP elasticas a nuestra vpc. (para usarla luego para nuestras instancias.)
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway: # Nat para nuestra red pública 1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway: # Nat para nuestra red pública 2 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet2      

  PrivateRouteTable1: #Nuestra tabla de enrutamiento para nuestras redes privadas.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateRouteTable2: #Nuestra tabla de enrutamiento para nuestras redes privadas.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnet1RouteTableAssociation: # Enlazamos nuestra tabla a nuestra primer red privada. 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation: # Enlazamos nuestra tabla 2 a nuestra segunda red privada.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DefaultPrivateRoute1: # Ruta por defecto en nuestra tabla para nuestra red privada 1.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  DefaultPrivateRoute2: # Ruta por defecto en nuestra tabla para nuestra red privada 2.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


## Definición de nuestros dos security group, uno para el balanceador de carga 
## Otro para nuestras EC2
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:    
      VpcId: !Ref VPC
      GroupName: !Sub "${AWS::StackName} SG ALB Public"
      GroupDescription: !Sub "${AWS::StackName} SG ALB Public"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} SG ALB Public"

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:    
      VpcId: !Ref VPC
      GroupName: !Sub "${AWS::StackName} SG Container Instance"
      GroupDescription: !Sub "${AWS::StackName} SG Container Instance"
      SecurityGroupIngress:
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} SG EC2 Instance" 
  
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds: !Ref  EC2SecurityGroup     
      SubnetId: !Ref PrivateSubnet1                
      KeyName: 'serverAzone1'
      ImageId: !Ref 'AIM'      

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds: !Ref  EC2SecurityGroup     
      SubnetId: !Ref PrivateSubnet1                             
      KeyName: 'serverAzone1'
      ImageId: !Ref 'AIM' 


  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-PublicALB"
      SecurityGroups: !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-target-group"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckTimeoutSeconds: 15
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200      

Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: "SeminarioProyecto12-VPC"

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: "SeminarioProyecto12-PublicSubnets"

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: "SeminarioProyecto12-PrivateSubnets"

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: "SeminarioProyecto12-PublicSubnet1"

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: "SeminarioProyecto12-PublicSubnet2"

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: "SeminarioProyecto12-PrivateSubnet1"

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: "SeminarioProyecto12-PrivateSubnet2"
  ALBSecutiryGroup:
    Description: Secutiry group created for load balancer
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: "SeminarioProyecto12-sg-alb"

  ECSSecutiryGroup:
    Description: Secutiry group created for ECS web server
    Value: !Ref EC2SecurityGroup
    Export:
      Name: "SeminarioProyecto12-sg-ecs"      

  EC2Instance1:
    Description: Web Server 1
    Value: !Ref EC2Instance1
    Export:
      Name: "SeminarioProyecto12-ecs-sever1"

  EC2Instance1:
    Description: Web Server 2
    Value: !Ref EC2Instance2
    Export:
      Name: "SeminarioProyecto12-ecs-sever2"    

  Listener:
    Description: ApplicationLoadBalancer Listener
    Value: !Ref 'ApplicationLoadBalancerListener'
    
  ApplicationLoadBalancerEndpoint:
    Description: DNS name of the ApplicationLoadBalancer
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
    Export:
        Name: "SeminarioProyecto12-LoadBalancer"
  TargetGroup:
    Description: TargetGroup for ABL
    Value: !Ref TargetGroup
    Export:
        Name: "SeminarioProyecto12-targetgroup"            